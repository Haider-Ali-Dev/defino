{"version":3,"sources":["components/Header/Header.js","components/Word/Word.js","components/Define/Define.js","App.js","reportWebVitals.js","index.js"],"names":["Header","React","memo","props","class","Word","meaning","length","className","style","textAlign","word","phonetic","origin","meanings","partOfSpeech","definitions","definition","example","synonyms","map","item","Define","useState","setWord","setMeaning","getMeaning","a","fetch","toLowerCase","res","json","data","placeholder","onChange","event","target","value","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAUeA,EARAC,IAAMC,MAAK,SAACC,GACvB,OACI,8BACI,oBAAIC,MAAM,OAAV,yBC6BGC,G,MAhCF,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACX,OAAIA,EAAQC,OAEJ,sBAAKC,UAAU,OAAf,UACI,oBAAIC,MAAO,CAACC,UAAU,UAAtB,yBACA,8BAAG,sBAAMF,UAAU,YAAhB,kBAAH,KAA6CF,EAAQ,GAAGK,QACxD,8BAAG,sBAAMH,UAAU,YAAhB,sBAAH,KAAiDF,EAAQ,GAAGM,YAC5D,8BAAG,sBAAMJ,UAAU,YAAhB,oBAAH,KAA+CF,EAAQ,GAAGO,UAC1D,8BAAG,sBAAML,UAAU,YAAhB,4BAAH,KAAuDF,EAAQ,GAAGQ,SAAS,GAAGC,gBAC9E,8BAAG,sBAAMP,UAAU,YAAhB,wBAAH,KAAmDF,EAAQ,GAAGQ,SAAS,GAAGE,YAAY,GAAGC,cACzF,8BAAG,sBAAMT,UAAU,YAAhB,qBAAH,KAAgDF,EAAQ,GAAGQ,SAAS,GAAGE,YAAY,GAAGE,WACtF,8BAAG,sBAAMV,UAAU,YAAhB,sBAAH,OACA,6BACKF,EAAQ,GAAGQ,SAAS,GAAGE,YAAY,GAAGG,SAASZ,OAASD,EAAQ,GAAGQ,SAAS,GAAGE,YAAY,GAAGG,SAASC,KAAI,SAACC,GACzG,OAAO,6BAAKA,OACZ,0CAUZ,iDCEGC,G,MAxBA,WACX,MAAwBC,mBAAS,IAAjC,mBAAOZ,EAAP,KAAaa,EAAb,KACA,EAA8BD,mBAAS,IAAvC,mBAAOjB,EAAP,KAAgBmB,EAAhB,KACMC,EAAU,uCAAG,8BAAAC,EAAA,0DACZhB,EADY,gCAEOiB,MAAM,mDAAD,OAAoDjB,EAAKkB,gBAFrE,cAELC,EAFK,gBAGQA,EAAIC,OAHZ,OAGLC,EAHK,OAIXP,EAAWO,GAJA,2CAAH,qDAOhB,OACI,8BACI,sBAAKxB,UAAU,SAAf,UACI,cAAC,EAAD,IACA,gCACA,uBAAOA,UAAU,aAAayB,YAAa,eAAgBC,SAAU,SAACC,GAAD,OAAWX,EAAQW,EAAMC,OAAOC,UACrG,wBAAQ7B,UAAU,cAAc8B,QAASZ,EAAzC,uBAEA,cAAC,EAAD,CAAMpB,QAASA,EAASK,KAAMA,WCd/B4B,MANf,WACE,OACE,cAAC,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.01658289.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Header.css'\r\nconst Header = React.memo((props) => {\r\n    return (\r\n        <div>\r\n            <h1 class=\"name\">Defino</h1>\r\n        </div>\r\n    )\r\n}, )\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Word.css'\r\nconst Word = ({meaning}) => {\r\n    if (meaning.length) {\r\n        return (\r\n            <div className=\"main\">\r\n                <h1 style={{textAlign:\"center\"}}>Information</h1>\r\n                <p><span className=\"highlight\">Word</span>: {meaning[0].word}</p>\r\n                <p><span className=\"highlight\">Phonetic</span>: {meaning[0].phonetic}</p>\r\n                <p><span className=\"highlight\">Origin</span>: {meaning[0].origin}</p>\r\n                <p><span className=\"highlight\">Part of Speech</span>: {meaning[0].meanings[0].partOfSpeech}</p>\r\n                <p><span className=\"highlight\">Defination</span>: {meaning[0].meanings[0].definitions[0].definition}</p>\r\n                <p><span className=\"highlight\">Example</span>: {meaning[0].meanings[0].definitions[0].example}</p>\r\n                <p><span className=\"highlight\">Synonyms</span>:</p>\r\n                <ul>\r\n                    {meaning[0].meanings[0].definitions[0].synonyms.length ? meaning[0].meanings[0].definitions[0].synonyms.map((item) => {\r\n                        return <li>{item}</li>\r\n                    }): <p>None</p>}\r\n                </ul>\r\n            </div>\r\n        )\r\n\r\n\r\n\r\n\r\n    } else {\r\n        return (\r\n            <div>\r\n                Enter a Word\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Word;","import React, { useState } from 'react';\r\nimport Header from '../Header/Header';\r\nimport Word from '../Word/Word';\r\nimport './Define.css'\r\n\r\nconst Define = () => {\r\n    const [word, setWord] = useState(\"\");\r\n    const [meaning, setMeaning] = useState([]);\r\n    const getMeaning = async () => {\r\n        if(word){\r\n            const res = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word.toLowerCase()}`)\r\n            const data = await res.json();\r\n            setMeaning(data)\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"center\">\r\n                <Header/>\r\n                <div>\r\n                <input className=\"word-input\" placeholder={\"Enter a Word\"} onChange={(event) => setWord(event.target.value)}/>\r\n                <button className=\"word-button\" onClick={getMeaning}>Define</button>\r\n                </div>\r\n                <Word meaning={meaning} word={word}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Define;","import './App.css';\nimport Define from './components/Define/Define';\n\nfunction App() {\n  return (\n    <Define/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}